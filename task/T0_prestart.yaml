# (c) rapiddweller GmbH 2020
---
- name: Start
  hosts: localhost
  vars:
    project_dir: "{{lookup('env','PWD')}}"
    network: rddnet
    supported_services:
#      minio:
#        name: minio_local
#        docker_image: "minio/minio"
#        network: "{{ network }}"
#        command: 'server --console-address ":9001" /data'
#        env: {
#          MINIO_ACCESS_KEY: "benadmin",
#          MINIO_SECRET_KEY: "rdadm123!",
#          MINIO_COMPRESS: "true",
#          MINIO_COMPRESS_EXTENSIONS: ".csv,.xml"
#        }
#        entrypoint: >
#          /bin/sh -c "
#          /usr/bin/mc config host add minio_local http://minio:9000 benadmin rdadm123!;
#          /usr/bin/mc mb minio_local/demo;
#          /usr/bin/mc mb minio_local/project;
#          /usr/bin/mc mb minio_local/snapshot;
#          exit 0;
#          "
#        published_ports:
#          - "39000:9000"
#          - "39001:9001"
#      mongodb:
#        name: mongodb_local
#        docker_image: mongo:latest
#        network: "{{ network }}"
#        env: {
#          DB_HOST: mongodb,
#          DB_PORT: "27017",
#          DB_CONNECTION: "benerator",
#          MONGO_INITDB_ROOT_USERNAME: "benerator",
#          MONGO_INITDB_ROOT_PASSWORD: "benerator"
#        }
#        published_ports:
#          - "37017:27017"
#      postgres:
#        name: postgres_local
#        docker_image: postgis/postgis
#        network: "{{ network }}"
#        volumes:
#          - ./scripts/:/docker-entrypoint-initdb.d/
#        env: {
#          POSTGRES_DB: benerator,
#          POSTGRES_USER: benerator,
#          POSTGRES_PASSWORD: benerator
#        }
#        published_ports:
#          - "35432:5432"
#      mysql:
#        name: mysql_local
#        docker_image: mariadb
#        network: "{{ network }}"
#        env: {
#          MARIADB_ROOT_PASSWORD: benerator,
#          MARIADB_DATABASE: benerator,
#          MARIADB_USER: benerator
#        }
#        published_ports:
#          - "33306:3306"
#      mssql:
#        name: mssql_local
#        docker_image: mcr.microsoft.com/azure-sql-edge
#        network: "{{ network }}"
#        env: {
#          ACCEPT_EULA: Y,
#          SA_PASSWORD: Benerator123!
#        }
#        published_ports:
#          - "31433:1433"
#      oracle:
#        name: oracle_local
#        docker_image: oracleinanutshell/oracle-xe-11g
#        network: "{{ network }}"
#        env: {
#          ORACLE_ALLOW_REMOTE: 'true',
#          ORACLE_ENABLE_XDB: 'true',
#          # user: XDB PW: xdb
#        }
#        published_ports:
#          - "31521:1521"
#      db2:
#        # db: testdb, user db2inst1 pw: benerator
#        name: db2_local
#        docker_image: ibmcom/db2
#        network: "{{ network }}"
#        privileged: true
#        volumes:
#          - /home/akell/Documents/docker/db2/database:/database
#        env: {
#          LICENSE: 'accept',
#          DB2INST1_PASSWORD: benerator,
#          DBNAME: testdb,
#          SAMPLEDB: 'true',
#        }
#        published_ports:
#          - "50000:50000"
#      firebird:
#        name: firebird_local
#        docker_image: jacobalberty/firebird
#        network: "{{ network }}"
#        env: {
#          ISC_PASSWORD: 'benerator',
#          FIREBIRD_DATABASE: 'benerator',
#          FIREBIRD_USER: 'benerator',
#          FIREBIRD_PASSWORD: 'benerator',
#        }
#        published_ports:
#          - "33050:3050"
      vertica:
        #vertica db docker
        name: vertica_local
        docker_image: vertica/vertica-ce:11.1.0-0
        network: "{{ network }}"
        env: {
          APP_DB_USER: "benerator",
          APP_DB_PASSWORD: "benerator",
          TZ: "Europe/Prague",
          APP_DB_NAME: "benerator",
          VERTICA_MEMDEBUG: "2",
        }
        published_ports:
          - "5433:5433"
          - "5444:5444"


  tasks:
    - name: Supported Services
      debug:
        msg: "Hello, {{ item.key }}!"
      with_dict: "{{ supported_services }}"

    - name: Project Dir
      debug:
        msg: "{{ project_dir }}"

    - name: Delete default containers
      docker_container:
        name: "{{ item.value.name }}"
        image: "{{ item.value.docker_image }}"
        state: absent
      with_dict: "{{  supported_services  }}"
      tags:
        - clean

    - name: delete network
      docker_network:
        name: "{{ network }}"
        state: absent
        force: yes
      tags:
        - clean

    - name: create network
      docker_network:
        name: "{{ network }}"
      tags:
        - create

    - name: Create default containers
      docker_container:
        name: "{{ item.value.name }}"
        privileged: "{{ item.value.privileged | default(omit)}}"
        command: "{{ item.value.command | default(omit)}}"
        image: "{{ item.value.docker_image }}"
        networks:
          - name: "{{ network }}"
        purge_networks: yes
        published_ports: "{{ item.value.published_ports }}"
        env: "{{ item.value.env }}"
        volumes: "{{ item.value.volumes | default(omit) }}"
        state: started
      with_dict: "{{  supported_services  }}"
      tags:
        - create