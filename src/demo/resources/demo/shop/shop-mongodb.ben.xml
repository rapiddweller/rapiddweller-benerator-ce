<?xml version="1.0" encoding="utf-8"?>


<setup
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="https://www.benerator.de/schema/3.0.0"
        xsi:schemaLocation="https://www.benerator.de/schema/3.0.0 http://benerator.de/schema/rapiddweller-benerator-ce-3.0.0.xsd"
        defaultDataset="US" defaultLocale="en_US">

    <comment>
        - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        ! Demonstration file for populating the shop database. !
        ! !
        ! You can choose a database and a stage like this: !
        ! -Dstage=development -Ddatabase=oracle !
        ! !
        ! These database types are provided: !
        ! sql: oracle, db2, sql_server, mysql, postgres, hsql, !
        ! hsqlmem, firebird, derby, h2 !
        ! no sql: mongodb !
        ! !
        ! ...and these stage configurations: !
        ! development, perftest !
        ! !
        ! Set up your database connection in the file !
        ! &lt;database&gt;/shop.&lt;database&gt;.properties !
        ! !
        ! You may want to try different generation quantities in !
        ! shop.&lt;stage&gt;.properties !
        - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    </comment>

    <import domains="person,net,product,address"/>
    <import platforms="db"/>

    <comment>setting default values</comment>
    <setting name="stage" default="development"/>
    <setting name="database" default="mongodb"/>

    <comment>import stage and database specific properties</comment>
    <include
            uri="{ftl:${database}/shop.${database}.properties}"/> <!-- ftl: is the prefix used for scripting with FreeMarker Template Language -->
    <include uri="{ftl:shop.${stage}.properties}"/>

    <comment>log the settings to the console</comment>
    <echo>Starting generation for</echo>
    <echo>{ftl: ${product_count + 6} products}</echo>
    <echo>{ftl: ${customer_count + 1} customers}</echo>
    <echo>{ftl: ${orders_per_customer} orders per customer}</echo>
    <echo>{ftl: ${items_per_order} items per order}</echo>
    <echo>{ftl:encoding:${context.defaultEncoding} default pageSize:${context.defaultPageSize}}</echo>

    <comment>define a mongodb database that will be referred by the id 'db' subsequently</comment>
    <mongodb id="db"/>

    <pre-parse-generate target="db"/>

    <meta-model type="db_category" consumer="db">
        <id name="id" type="string" unique="true"/>
        <attribute name="name" type="string"/>
        <attribute name="parent_id" type="string"/>
    </meta-model>

    <bean id="idGen" spec="new IncrementGenerator(1000)"/>

    <comment>Creating a valid base data set for regression testing by importing a DbUnit file</comment>
    <iterate source="{ftl:${database}/shop.dbunit.xml}" consumer="db"/>

    <comment>Importing some more predefined products from a CSV file</comment>
    <iterate source="products.import.csv" type="db_product" encoding="utf-8" consumer="db"/>

    <generate type="db_product" count="{product_count}" consumer="db">
        <id name="ean_code" type="long" generator="new EANGenerator(true)"/>
        <reference name="category_id" targetType="db_category" source="db" distribution="random"/>
        <attribute name="price" type="big_decimal" min="0.49" max="99.99" granularity="0.10" distribution="cumulated"/>
    </generate>

    <comment>create customers</comment>
    <generate type="db_user" count="{customer_count}" consumer="db">
        <variable name="person" generator="PersonGenerator" dataset="{country}" locale="{locale}"/>
        <variable name="address" generator="AddressGenerator" dataset="{country}" locale="{locale}"/>
        <id name="id" type="int" generator="idGen"/>
        <attribute name="name" script="person.givenName + ' ' + person.familyName"/>
        <attribute name="email" generator="EMailAddressGenerator"/>
        <attribute name="password" pattern="[A-Za-z0-9]{8,12}"/>
        <reference name="role_id" constant="customer"/>
        <part name="db_customer" minCount="1" maxCount="1">
            <id name="id" type="int" script="db_user.id"/>
            <attribute name="category" values="'A','B','C'"/>
            <attribute name="salutation" script="person.salutation"/>
            <attribute name="first_name" script="person.givenName"/>
            <attribute name="last_name" script="person.familyName"/>
            <attribute name="birth_date" nullable="false"/>
            <part name="db_address" minCount="1" maxCount="1">
                <id name="id" type="int" generator="idGen"/>
                <attribute name="street" script="address.street"/>
                <attribute name="houseNumber" script="address.houseNumber"/>
                <attribute name="postalCode" script="address.postalCode"/>
                <attribute name="city" script="address.city"/>
                <attribute name="state" script="address.state"/>
                <attribute name="country" script="address.country"/>
            </part>
        </part>
    </generate>

    <comment>create orders for random customers and random products</comment>
    <generate type="db_order" count="{customer_count * orders_per_customer}" consumer="db">
        <id name="id" generator="idGen" type="int"/>
        <reference name="customer_id" type="int" source="db" targetType="db_customer" cyclic="true"/>
        <attribute name="total_price" type="double" constant="0"/>
    </generate>

    <comment>create order items</comment>
    <generate type="db_order_item" count="{customer_count * orders_per_customer * items_per_order}" consumer="db">
        <variable name="product" source="db" distribution="cumulated"
                  selector="find: 'db_product', filter: {}, projection: {_id: 0, ean_code: 1, price: 1}"/>
        <id name="id" generator="idGen" type="int"/>
        <attribute name="number_of_items" min="1" max="27" distribution="cumulated" type="int"/>
        <reference name="order_id" type="int" targetType="db_order" source="db" cyclic="true"
                   selector="find: 'db_order', filter: {id: { $gte: 1 }}, projection: {id: 1}"/>
        <reference name="product_ean_code" type="long" script="product[0]"/>
        <reference name="address_id" source="db" targetType="db_address" cyclic="true"/>
        <attribute name="total_price" type="double" script="product[1] * db_order_item.number_of_items"/>
    </generate>

    <comment>Update order data, calculating the total sum of each order</comment>
    <iterate source="db" type="db_order" consumer="db.updater()">
        <attribute name="total_price" type="double" source="db" cyclic="true"
                   selector="{{ftl:'aggregate': 'db_order_item',
                                    pipeline: [
                                        {'$match': { 'order_id': { '$eq': ${db_order.id}}}},
                                        {'$group': { '_id': ${db_order.id}, 'sum': { '$sum': '$total_price'}}},
                                        {$project: { _id: 0, sum: 1}}],
                                    cursor: {}
                                    }}"/>
    </iterate>

    <echo>Check if enough data has been generated</echo>
    <iterate type="db_order" source="db" consumer="ConsoleExporter">
        <attribute name="counter" type="int" generator="IncrementGenerator"/>
    </iterate>
    <if test="db_order.counter != 300">
        <error>{ftl: ${db_order.counter} items}</error>
    </if>
    <iterate type="db_order_item" source="db" consumer="ConsoleExporter">
        <attribute name="counter" type="int" generator="IncrementGenerator"/>
    </iterate>
    <if test="db_order_item.counter != 1500">
        <error>{ftl: ${db_order_item.counter} items}</error>
    </if>
    <iterate type="db_user" source="db" consumer="ConsoleExporter">
        <attribute name="counter" type="int" generator="IncrementGenerator"/>
    </iterate>
    <if test="db_user.counter != 100">
        <error>{ftl: ${db_user.counter} items}</error>
    </if>
    <iterate type="db_product" source="db" consumer="ConsoleExporter">
        <attribute name="counter" type="int" generator="IncrementGenerator"/>
    </iterate>
    <if test="db_product.counter != 57">
        <error>{ftl: ${db_product.counter} items}</error>
    </if>

</setup>