<setup xmlns="https://www.benerator.de/schema/3.0.0">
    <import platforms='db'/>
    <database id="db" environment="{environment}" system="{system}"/>
    <execute target="db" onError="ignore">
        drop table "ben_benchmark";
        commit;
    </execute>
    <execute target="db">
        create table "ben_benchmark" (
            "c_0_id"        {char}(36),
            "c_1_timestamp" {timestamp},
            "c_2_flag"      {char},
            "c_3_status"    {varchar}(10),
            "c_4_code"      {char}(4),
            "c_5_code"      {char}(8),
            "c_6_code"      {char}(8),
            "c_7_timestamp" {timestamp},
            "c_8_timestamp" {timestamp},
            "c_9_timestamp" {timestamp},
            primary key ("c_0_id")
        );
        commit;
    </execute>

    <!-- dummy read which is not measured, in order to exclude initialization and metadata parsing time -->
    <iterate type="ben_benchmark" source="db" consumer="NoConsumer"/>

    <!-- generate and write data to the table, measuring it with sensor "benchmark.write" -->
    <generate type="ben_benchmark" count="{writeCount}" threads="{threads}" pageSize="1000"
              sensor="benchmark.write" consumer="db">
        <id name="c_0_id" type="string" generator="UUIDGenerator"/>
        <attribute name="c_1_timestamp" type="timestamp" min="1970-01-02"/>
        <attribute name="c_2_flag"      type="string"    pattern="[YN]"/>
        <attribute name="c_3_status"    type="string"    values="'CREATED','ACCEPTED','REJECTED','COMPLETED'"/>
        <attribute name="c_4_code"      type="string"    pattern="[0-9]{4}"/>
        <attribute name="c_5_code"      type="string"    pattern="[0-9]{8}"/>
        <attribute name="c_6_code"      type="string"    pattern="[0-9]{8}"/>
        <attribute name="c_7_timestamp" type="timestamp" min="1970-01-02"/>
        <attribute name="c_8_timestamp" type="timestamp" min="1970-01-02"/>
        <attribute name="c_9_timestamp" type="timestamp" min="1970-01-02"/>
    </generate>

    <!-- Reading back the generated data from table, measuring it with sensor "benchmark.read" -->
    <iterate type="ben_benchmark" source="db" count="{readCount}" cyclic="true" threads="{threads}" pageSize="1000"
             sensor="benchmark.read" consumer="NoConsumer"/>

    <execute target="db">
        drop table "ben_benchmark";
        commit;
    </execute>

</setup>